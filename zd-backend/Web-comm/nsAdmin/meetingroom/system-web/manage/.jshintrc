{
    "passfail": false,  // Stop on first error
    "maxerr": 100,    // Maximum error before stopping
    "node": true, // Enable globals available when code is running inside of the NodeJS runtime environment.
    "browser": true, // Standard browser globals e.g. `window`, `document`.
    "esnext": true, // Allow ES.next specific features such as `const` and `let`.
    "bitwise": false, // Prohibit bitwise operators (&, |, ^, etc.).
    "camelcase": false, // Permit only camelcase for `var` and `object indexes`.
    "curly": false, // Require {} for every new block or scope.
    "eqeqeq": true, // Require triple equals i.e. `===`.
    "immed": true, // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef": true, // Prohibit variable use before definition.
    "newcap": true, // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg": true, // Prohibit use of `arguments.caller` and `arguments.callee`.
    "quotmark": "single", // Define quotes to string values.
    "regexp": true, // Prohibit `.` and `[^...]` in regular expressions.
    "unused": true, // Warn unused variables.
    "strict": true, // Require `use strict` pragma in every file.
    "trailing": true, // Prohibit trailing whitespaces.
    "smarttabs": false, // Suppresses warnings about mixed tabs and spaces
    "eqnull": false, // Tolerate use of `== null`
    "evil": false,  // Tolerate use of `eval`
    "shadow": false,  // Allows re-define variables later in code e.g. `var x=1; x=2;`
    "undef": true,   // Require all non-global variables be declared before they are used
    "globals": { // Globals variables.
        "angular": true
    },
    "predef": [ // Extra globals.
        "define",
        "require",
        "exports",
        "module",
        "describe",
        "before",
        "beforeEach",
        "after",
        "afterEach",
        "it",
        "inject",
        "expect"
    ],
    "indent": 4, // Specify indentation spacing
    "devel": true, // Allow development statements e.g. `console.log();`.
    "noempty": true // Prohibit use of empty blocks.
}
/*
http://www.jianshu.com/p/4cb23f9e19d3
JSHint配置选项

忽略代码段(使用时将#替换为*)
 // Code here will be linted with JSHint.
 /# jshint ignore:start #/
 // Code here will be ignored by JSHint.
 /# jshint ignore:end #/

 忽略代码行
 ignoreThis(); // jshint ignore:line

 bitwise        禁用位运算符，位运算符在 JavaScript 中使用较少，经常是把 && 错输成 &

 curly          循环或者条件语句必须使用花括号包围

 eqeqeq         设置为true,禁止使用这个选项 ==和 !=，强制使用 ===和 !==

 esversion      这个选项用于指定的ECMAScript版本代码必须遵循。它可以假设以下值之一:
                3--如果你需要可执行程序在老这类浏览器Internet Explorer 6/7/8/9-and其他遗留JavaScript环境
                5--先使语法中定义ECMAScript 5.1规范。这包括允许保留关键字作为对象属性
                6--告诉JSHint代码使用ECMAScript 6具体的语法。请注意,并不是所有的浏览器都实现它们

forin           这个选项要求所有 for in循环过滤对象的item。他在声明中允许for遍历一个对象所有属性的名称包括通过原型链继承来的属性

freeze          这个选项禁止重写原生对象的原型列如 Array, Date等等

funcscope       禁止从外部访问内部声明的变量

futurehostile   允许警告js未来版本中定义的标识符

globals         这个选项可以用来指定一个没有正式定义的全局变量的白名单。

iterator        禁止iterator属性有关的警告,此属性不支持所有浏览器所以小心使用它

latedef         禁止定义之前使用变量,这个选项设置为“nofunc”将允许函数声明被忽略

maxcomplexity   设置代码文件独立直线路径最大复杂度检测

maxdepth        设置代码最大嵌套深度

maxerr          设置JSHint最大警告数。默认50

maxparams       这个选项允许您设置每个函数的形参最大数量

maxstatements   这个选项允许您设置语句允许的最大声明数

noarg           禁止使用这个选项 arguments.caller和 arguments.callee。这两个 .caller和.callee将会被弃用。事实上,ECMAScript 5 严格模式禁止使用arguments.callee

nocomma         这个选项禁止使用逗号操作符

nonbsp          不换行的空格警告

nonew           禁止使用new构造器函数

notypeof        检查无效 typeof操作符的值

predef          扩展的隐式全局变量

shadow          检查变量重复定义,接受4个值：
                    "inner" 只检查是否在相同的作用域重复定义
                    "outer" 检查外部作用域
                    false 与inne一样
                    true 允许变量覆盖

singleGroups    禁止使用分组操作符

strict          ECMAScript 5严格模式
                    "global" - 全局层面的严格模式"use strict";
                    "implied" - 文件里面使用"use strict";
                    false - 禁止使用严格模式
                    true - 函数上面必须使用一个"use strict";

undef           变量未定义

unused          变量定义未使用

varstmt         设置为true时，禁止使用var声明变量

宽松选项(设置为true时,这些选项会使代码JSHint产生更少的警告)

asi             禁止缺少分号警告

boss            禁止比较表达式的值没有达到预期警告

debug           忽略 debugger

elision         告诉JSHint代码使用ES3数组省略元素,或空元素(例如, [1, , , 4, , , 7])

eqnull          禁止 == null比较。通常这样的比较有用,当你想检查一个变量是否null或 undefined

evil            禁止使用表达式，一般的使用函数调用

lastsemic       检查一行代码最后声明后面的分号是否遗漏

laxcomma        检查逗号在代码行最前面的编程风格

loopfunc        禁止内部循环，定义函数的内部循环可能导致这样的错误

noyield         检查函数生成器没有yield声明

plusplus        禁止一元递增和递减运算符的使用

proto           禁止关于__proto__属性的警告

scripturl       禁止使用脚本URL定向，比如javascript:...

supernew        检查怪异结构 new function () { ... }和 new Object

validthis       注意:可以使用这个选项只有在函数的范围,在非构造器函数中使用 this

withstmt        检查with使用声明

环境变量(这些选项让JSHint知道一些预先定义的全局变量)

browser         暴露浏览器属性的全局变量，列如 window,document

browserify      这个选项定义全局变量使用时可用Browserify工具建立一个项目

couch           这个选项定义全局暴露CouchDB。CouchDB是一个面向文档的数据库,可以查询和索引MapReduce的方式使用JavaScript

devel           这个选项定义了全局变量,通常用于日志调试: console, alert等等

dojo            这个选项定义全局暴露的Dojo Toolkit

jasmine         这个选项定义全局暴露jasmine的单元测试框架

jquery          这个选项定义全局暴露的jQuery库

mocha           这个选项定义全局暴露的“BDD”和“TDD”的ui mocha单元测试框架

module          这个选项告诉JSHint,输入代码描述了一个ECMAScript 6模块。所有模块的代码解释为严格模式代码

mootools        这个选项定义全局暴露的MooToolsJavaScript框架

node            这个选项定义全局变量可以当你的代码运行在node的运行时环境

nonstandard     这个选项定义非标准但广泛采用全局变量等 escape和 unescape

phantom         这个选项定义全局可用你的核心运行时内部PhantomJS运行时环境

prototypejs     这个选项定义全局暴露的prototypejs框架

qunit           这个选项定义全局暴露QUnit单元测试框架

rhino           这个选项定义全局变量可以当你的代码运行在rhino的运行时环境。rhino是一个开源的实现完全用Java编写的JavaScript

shelljs         这个选项定义全局暴露ShellJS库

typed           这个选项定义全局变量数组类型构造函数

worker          这个选项定义全局变量可以当你的代码运行在web worker.web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能

wsh             这个选项定义全局变量可以当你的代码运行在Windows Script Host的运行时环境

yui             这个选项定义全局暴露的yui框架





*/